// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : alpha_soc.v
// Device     :
// LiteX sha1 : 02277680
// Date       : 2023-11-25 17:32:04
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module alpha_soc (
`ifdef USE_POWER_PINS
    inout vdd,	// User area 1 1.8V supply
    inout vss,	// User area 1 digital ground
`endif
    input  wire   [9:0] io_in,
    output  wire   [9:0] io_oeb,
    output  wire   [9:0] io_out,
    output wire    [2:0] user_irq,
    input  wire          wb_clk_i,
    input  wire          wb_rst_i,
    output wire          wbs_ack_o,
    input  wire   [31:0] wbs_adr_i,
    input  wire          wbs_cyc_i,
    input  wire   [31:0] wbs_dat_i,
    output wire   [31:0] wbs_dat_o,
    input  wire    [3:0] wbs_sel_i,
    input  wire          wbs_stb_i,
    input  wire          wbs_we_i
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── identifier (Identifier)
└─── spiflash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
└─── spiflash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── master (LiteSPIMaster)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
└─── spi_master (SPIMaster)
│    └─── fsm (FSM)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── timer1 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── sram_0* (SRAM)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           spiflash4x_clk;
wire          spiflash4x_cs_n;
reg           spi_clk;
reg           spi_cs_n;
wire          spi_miso;
reg           spi_mosi;

reg    [13:0] basesoc_adr = 14'd0;
wire   [31:0] basesoc_dat_r;
reg    [31:0] basesoc_dat_w = 32'd0;
reg           basesoc_litespi_grant = 1'd0;
reg     [3:0] basesoc_litespi_next_state = 4'd0;
wire    [1:0] basesoc_litespi_request;
reg           basesoc_litespi_rx_demux_endpoint0_source_first = 1'd0;
reg           basesoc_litespi_rx_demux_endpoint0_source_last = 1'd0;
reg    [31:0] basesoc_litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
wire          basesoc_litespi_rx_demux_endpoint0_source_ready;
reg           basesoc_litespi_rx_demux_endpoint0_source_valid = 1'd0;
reg           basesoc_litespi_rx_demux_endpoint1_source_first = 1'd0;
reg           basesoc_litespi_rx_demux_endpoint1_source_last = 1'd0;
reg    [31:0] basesoc_litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire          basesoc_litespi_rx_demux_endpoint1_source_ready;
reg           basesoc_litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire          basesoc_litespi_rx_demux_sel;
wire          basesoc_litespi_rx_demux_sink_first;
wire          basesoc_litespi_rx_demux_sink_last;
wire   [31:0] basesoc_litespi_rx_demux_sink_payload_data;
reg           basesoc_litespi_rx_demux_sink_ready = 1'd0;
wire          basesoc_litespi_rx_demux_sink_valid;
reg     [3:0] basesoc_litespi_state = 4'd0;
wire          basesoc_litespi_tx_mux_endpoint0_sink_first;
wire          basesoc_litespi_tx_mux_endpoint0_sink_last;
wire   [31:0] basesoc_litespi_tx_mux_endpoint0_sink_payload_data;
wire    [5:0] basesoc_litespi_tx_mux_endpoint0_sink_payload_len;
wire    [7:0] basesoc_litespi_tx_mux_endpoint0_sink_payload_mask;
wire    [3:0] basesoc_litespi_tx_mux_endpoint0_sink_payload_width;
reg           basesoc_litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire          basesoc_litespi_tx_mux_endpoint0_sink_valid;
wire          basesoc_litespi_tx_mux_endpoint1_sink_first;
wire          basesoc_litespi_tx_mux_endpoint1_sink_last;
wire   [31:0] basesoc_litespi_tx_mux_endpoint1_sink_payload_data;
wire    [5:0] basesoc_litespi_tx_mux_endpoint1_sink_payload_len;
wire    [7:0] basesoc_litespi_tx_mux_endpoint1_sink_payload_mask;
wire    [3:0] basesoc_litespi_tx_mux_endpoint1_sink_payload_width;
reg           basesoc_litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire          basesoc_litespi_tx_mux_endpoint1_sink_valid;
wire          basesoc_litespi_tx_mux_sel;
reg           basesoc_litespi_tx_mux_source_first = 1'd0;
reg           basesoc_litespi_tx_mux_source_last = 1'd0;
reg    [31:0] basesoc_litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] basesoc_litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] basesoc_litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] basesoc_litespi_tx_mux_source_payload_width = 4'd0;
wire          basesoc_litespi_tx_mux_source_ready;
reg           basesoc_litespi_tx_mux_source_valid = 1'd0;
reg     [1:0] basesoc_litespiphy_next_state = 2'd0;
reg     [1:0] basesoc_litespiphy_state = 2'd0;
reg     [1:0] basesoc_spimaster_next_state = 2'd0;
reg     [1:0] basesoc_spimaster_state = 2'd0;
reg           basesoc_we = 1'd0;
reg           basesoc_wishbone2csr_next_state = 1'd0;
reg           basesoc_wishbone2csr_state = 1'd0;
reg           basesoc_wishbone_ack = 1'd0;
wire   [29:0] basesoc_wishbone_adr;
wire    [1:0] basesoc_wishbone_bte;
wire    [2:0] basesoc_wishbone_cti;
wire          basesoc_wishbone_cyc;
reg    [31:0] basesoc_wishbone_dat_r = 32'd0;
wire   [31:0] basesoc_wishbone_dat_w;
reg           basesoc_wishbone_err = 1'd0;
wire    [3:0] basesoc_wishbone_sel;
wire          basesoc_wishbone_stb;
wire          basesoc_wishbone_we;
reg    [29:0] comb_array_muxed0 = 30'd0;
reg    [31:0] comb_array_muxed1 = 32'd0;
reg     [3:0] comb_array_muxed2 = 4'd0;
reg           comb_array_muxed3 = 1'd0;
reg           comb_array_muxed4 = 1'd0;
reg           comb_array_muxed5 = 1'd0;
reg     [2:0] comb_array_muxed6 = 3'd0;
reg     [1:0] comb_array_muxed7 = 2'd0;
reg    [19:0] count = 20'd1000000;
reg           crossbar_cs = 1'd0;
wire          crossbar_sink_first;
wire          crossbar_sink_last;
wire   [31:0] crossbar_sink_payload_data;
wire          crossbar_sink_ready;
wire          crossbar_sink_valid;
wire          crossbar_source_first;
wire          crossbar_source_last;
wire   [31:0] crossbar_source_payload_data;
wire    [5:0] crossbar_source_payload_len;
wire    [7:0] crossbar_source_payload_mask;
wire    [3:0] crossbar_source_payload_width;
wire          crossbar_source_ready;
wire          crossbar_source_valid;
wire    [3:0] csr_bankarray_adr;
wire   [15:0] csr_bankarray_csrbank0_clk_divider0_r;
reg           csr_bankarray_csrbank0_clk_divider0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank0_clk_divider0_w;
reg           csr_bankarray_csrbank0_clk_divider0_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank0_control0_r;
reg           csr_bankarray_csrbank0_control0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank0_control0_w;
reg           csr_bankarray_csrbank0_control0_we = 1'd0;
wire   [16:0] csr_bankarray_csrbank0_cs0_r;
reg           csr_bankarray_csrbank0_cs0_re = 1'd0;
wire   [16:0] csr_bankarray_csrbank0_cs0_w;
reg           csr_bankarray_csrbank0_cs0_we = 1'd0;
wire          csr_bankarray_csrbank0_loopback0_r;
reg           csr_bankarray_csrbank0_loopback0_re = 1'd0;
wire          csr_bankarray_csrbank0_loopback0_w;
reg           csr_bankarray_csrbank0_loopback0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank0_miso_r;
reg           csr_bankarray_csrbank0_miso_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank0_miso_w;
reg           csr_bankarray_csrbank0_miso_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank0_mosi0_r;
reg           csr_bankarray_csrbank0_mosi0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank0_mosi0_w;
reg           csr_bankarray_csrbank0_mosi0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire    [1:0] csr_bankarray_csrbank0_status_r;
reg           csr_bankarray_csrbank0_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_status_w;
reg           csr_bankarray_csrbank0_status_we = 1'd0;
wire          csr_bankarray_csrbank1_master_cs0_r;
reg           csr_bankarray_csrbank1_master_cs0_re = 1'd0;
wire          csr_bankarray_csrbank1_master_cs0_w;
reg           csr_bankarray_csrbank1_master_cs0_we = 1'd0;
wire   [23:0] csr_bankarray_csrbank1_master_phyconfig0_r;
reg           csr_bankarray_csrbank1_master_phyconfig0_re = 1'd0;
wire   [23:0] csr_bankarray_csrbank1_master_phyconfig0_w;
reg           csr_bankarray_csrbank1_master_phyconfig0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_master_status_r;
reg           csr_bankarray_csrbank1_master_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_master_status_w;
reg           csr_bankarray_csrbank1_master_status_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank1_mmap_dummy_bits0_r;
reg           csr_bankarray_csrbank1_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank1_mmap_dummy_bits0_w;
reg           csr_bankarray_csrbank1_mmap_dummy_bits0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire    [7:0] csr_bankarray_csrbank2_clk_divisor0_r;
reg           csr_bankarray_csrbank2_clk_divisor0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank2_clk_divisor0_w;
reg           csr_bankarray_csrbank2_clk_divisor0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank3_en0_r;
reg           csr_bankarray_csrbank3_en0_re = 1'd0;
wire          csr_bankarray_csrbank3_en0_w;
reg           csr_bankarray_csrbank3_en0_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_r;
reg           csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_w;
reg           csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_r;
reg           csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_w;
reg           csr_bankarray_csrbank3_reload0_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank3_update_value0_r;
reg           csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank3_update_value0_w;
reg           csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_r;
reg           csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_w;
reg           csr_bankarray_csrbank3_value_we = 1'd0;
wire          csr_bankarray_csrbank4_en0_r;
reg           csr_bankarray_csrbank4_en0_re = 1'd0;
wire          csr_bankarray_csrbank4_en0_w;
reg           csr_bankarray_csrbank4_en0_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_enable0_r;
reg           csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_enable0_w;
reg           csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_pending_r;
reg           csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_pending_w;
reg           csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_status_r;
reg           csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_status_w;
reg           csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_load0_r;
reg           csr_bankarray_csrbank4_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_load0_w;
reg           csr_bankarray_csrbank4_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_reload0_r;
reg           csr_bankarray_csrbank4_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_reload0_w;
reg           csr_bankarray_csrbank4_reload0_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire          csr_bankarray_csrbank4_update_value0_r;
reg           csr_bankarray_csrbank4_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank4_update_value0_w;
reg           csr_bankarray_csrbank4_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_value_r;
reg           csr_bankarray_csrbank4_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_value_w;
reg           csr_bankarray_csrbank4_value_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_we;
wire          dbus_ack;
wire   [29:0] dbus_adr;
wire    [1:0] dbus_bte;
wire    [2:0] dbus_cti;
wire          dbus_cyc;
wire   [31:0] dbus_dat_r;
wire   [31:0] dbus_dat_w;
wire          dbus_err;
wire    [3:0] dbus_sel;
wire          dbus_stb;
wire          dbus_we;
wire          done;
reg           error = 1'd0;
reg     [1:0] grant = 2'd0;
wire          ibus_ack;
wire   [29:0] ibus_adr;
wire    [1:0] ibus_bte;
wire    [2:0] ibus_cti;
wire          ibus_cyc;
wire   [31:0] ibus_dat_r;
wire   [31:0] ibus_dat_w;
wire          ibus_err;
wire    [3:0] ibus_sel;
wire          ibus_stb;
wire          ibus_we;
wire          inferedsdrtristate0__i;
reg           inferedsdrtristate0__o = 1'd0;
reg           inferedsdrtristate0_oe = 1'd0;
wire          inferedsdrtristate1__i;
reg           inferedsdrtristate1__o = 1'd0;
reg           inferedsdrtristate1_oe = 1'd0;
wire          inferedsdrtristate2__i;
reg           inferedsdrtristate2__o = 1'd0;
reg           inferedsdrtristate2_oe = 1'd0;
wire          inferedsdrtristate3__i;
reg           inferedsdrtristate3__o = 1'd0;
reg           inferedsdrtristate3_oe = 1'd0;
reg           int_rst = 1'd1;
reg    [31:0] interrupt = 32'd0;
reg     [1:0] litespimmap = 2'd0;
reg    [29:0] litespimmap_burst_adr = 30'd0;
reg    [29:0] litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg           litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
reg           litespimmap_burst_cs = 1'd0;
reg           litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg           litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg           litespimmap_bus_ack = 1'd0;
wire   [29:0] litespimmap_bus_adr;
wire    [1:0] litespimmap_bus_bte;
wire    [2:0] litespimmap_bus_cti;
wire          litespimmap_bus_cyc;
reg    [31:0] litespimmap_bus_dat_r = 32'd0;
wire   [31:0] litespimmap_bus_dat_w;
reg           litespimmap_bus_err = 1'd0;
wire    [3:0] litespimmap_bus_sel;
wire          litespimmap_bus_stb;
wire          litespimmap_bus_we;
reg     [8:0] litespimmap_count = 9'd256;
reg           litespimmap_cs = 1'd0;
wire          litespimmap_done;
reg    [31:0] litespimmap_dummy = 32'd57005;
reg           litespimmap_re = 1'd0;
wire          litespimmap_sink_first;
wire          litespimmap_sink_last;
wire   [31:0] litespimmap_sink_payload_data;
reg           litespimmap_sink_ready = 1'd0;
wire          litespimmap_sink_valid;
reg           litespimmap_source_first = 1'd0;
reg           litespimmap_source_last = 1'd0;
reg    [31:0] litespimmap_source_payload_data = 32'd0;
reg     [5:0] litespimmap_source_payload_len = 6'd0;
reg     [7:0] litespimmap_source_payload_mask = 8'd0;
reg     [3:0] litespimmap_source_payload_width = 4'd0;
wire          litespimmap_source_ready;
reg           litespimmap_source_valid = 1'd0;
wire    [7:0] litespimmap_spi_dummy_bits;
reg     [7:0] litespimmap_storage = 8'd8;
reg           litespimmap_wait = 1'd0;
reg           litespisdrphycore0 = 1'd0;
reg     [1:0] litespisdrphycore1 = 2'd0;
reg     [3:0] litespisdrphycore2 = 4'd0;
reg     [7:0] litespisdrphycore3 = 8'd0;
reg           litespisdrphycore_clk = 1'd0;
reg     [7:0] litespisdrphycore_cnt = 8'd0;
reg     [3:0] litespisdrphycore_count = 4'd11;
wire          litespisdrphycore_cs;
wire          litespisdrphycore_cs_enable;
wire    [7:0] litespisdrphycore_div;
wire          litespisdrphycore_done;
reg     [3:0] litespisdrphycore_dq_i = 4'd0;
reg     [3:0] litespisdrphycore_dq_o = 4'd0;
wire    [3:0] litespisdrphycore_dq_oe;
reg           litespisdrphycore_en = 1'd0;
reg           litespisdrphycore_en_int = 1'd0;
wire          litespisdrphycore_negedge;
wire          litespisdrphycore_posedge;
reg           litespisdrphycore_posedge_reg = 1'd0;
reg           litespisdrphycore_posedge_reg2 = 1'd0;
reg           litespisdrphycore_re = 1'd0;
wire          litespisdrphycore_sample;
wire    [7:0] litespisdrphycore_sample_cnt;
wire          litespisdrphycore_sink_first;
wire          litespisdrphycore_sink_last;
wire   [31:0] litespisdrphycore_sink_payload_data;
wire    [5:0] litespisdrphycore_sink_payload_len;
wire    [7:0] litespisdrphycore_sink_payload_mask;
wire    [3:0] litespisdrphycore_sink_payload_width;
reg           litespisdrphycore_sink_ready = 1'd0;
wire          litespisdrphycore_sink_valid;
reg           litespisdrphycore_source_first = 1'd0;
reg           litespisdrphycore_source_last = 1'd0;
wire   [31:0] litespisdrphycore_source_payload_data;
wire          litespisdrphycore_source_ready;
reg           litespisdrphycore_source_valid = 1'd0;
wire    [7:0] litespisdrphycore_spi_clk_divisor;
reg     [7:0] litespisdrphycore_sr_cnt = 8'd0;
reg     [7:0] litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg           litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
reg    [31:0] litespisdrphycore_sr_in = 32'd0;
reg           litespisdrphycore_sr_in_shift = 1'd0;
reg    [31:0] litespisdrphycore_sr_out = 32'd0;
reg           litespisdrphycore_sr_out_load = 1'd0;
reg           litespisdrphycore_sr_out_shift = 1'd0;
reg     [7:0] litespisdrphycore_storage = 8'd1;
wire          litespisdrphycore_update;
wire    [7:0] litespisdrphycore_update_cnt;
wire          litespisdrphycore_wait;
wire          master_cs;
reg           master_cs_re = 1'd0;
reg           master_cs_storage = 1'd0;
wire    [7:0] master_len;
wire    [7:0] master_mask;
reg           master_phyconfig_re = 1'd0;
reg    [23:0] master_phyconfig_storage = 24'd0;
wire          master_rx_fifo_pipe_valid_sink_first;
wire          master_rx_fifo_pipe_valid_sink_last;
wire   [31:0] master_rx_fifo_pipe_valid_sink_payload_data;
wire          master_rx_fifo_pipe_valid_sink_ready;
wire          master_rx_fifo_pipe_valid_sink_valid;
reg           master_rx_fifo_pipe_valid_source_first = 1'd0;
reg           master_rx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] master_rx_fifo_pipe_valid_source_payload_data = 32'd0;
wire          master_rx_fifo_pipe_valid_source_ready;
reg           master_rx_fifo_pipe_valid_source_valid = 1'd0;
wire          master_rx_fifo_sink_sink_first;
wire          master_rx_fifo_sink_sink_last;
wire   [31:0] master_rx_fifo_sink_sink_payload_data;
wire          master_rx_fifo_sink_sink_ready;
wire          master_rx_fifo_sink_sink_valid;
wire          master_rx_fifo_source_source_first;
wire          master_rx_fifo_source_source_last;
wire   [31:0] master_rx_fifo_source_source_payload_data;
wire          master_rx_fifo_source_source_ready;
wire          master_rx_fifo_source_source_valid;
wire          master_rx_ready;
wire   [31:0] master_rxtx_r;
reg           master_rxtx_re = 1'd0;
wire   [31:0] master_rxtx_w;
reg           master_rxtx_we = 1'd0;
wire          master_sink_first;
wire          master_sink_last;
wire   [31:0] master_sink_payload_data;
wire          master_sink_ready;
wire          master_sink_valid;
wire          master_source_first;
wire          master_source_last;
wire   [31:0] master_source_payload_data;
wire    [5:0] master_source_payload_len;
wire    [7:0] master_source_payload_mask;
wire    [3:0] master_source_payload_width;
wire          master_source_ready;
wire          master_source_valid;
reg           master_status_re = 1'd0;
reg     [1:0] master_status_status = 2'd0;
wire          master_status_we;
wire          master_tx_fifo_pipe_valid_sink_first;
wire          master_tx_fifo_pipe_valid_sink_last;
wire   [31:0] master_tx_fifo_pipe_valid_sink_payload_data;
wire    [5:0] master_tx_fifo_pipe_valid_sink_payload_len;
wire    [7:0] master_tx_fifo_pipe_valid_sink_payload_mask;
wire    [3:0] master_tx_fifo_pipe_valid_sink_payload_width;
wire          master_tx_fifo_pipe_valid_sink_ready;
wire          master_tx_fifo_pipe_valid_sink_valid;
reg           master_tx_fifo_pipe_valid_source_first = 1'd0;
reg           master_tx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] master_tx_fifo_pipe_valid_source_payload_data = 32'd0;
reg     [5:0] master_tx_fifo_pipe_valid_source_payload_len = 6'd0;
reg     [7:0] master_tx_fifo_pipe_valid_source_payload_mask = 8'd0;
reg     [3:0] master_tx_fifo_pipe_valid_source_payload_width = 4'd0;
wire          master_tx_fifo_pipe_valid_source_ready;
reg           master_tx_fifo_pipe_valid_source_valid = 1'd0;
reg           master_tx_fifo_sink_sink_first = 1'd0;
wire          master_tx_fifo_sink_sink_last;
wire   [31:0] master_tx_fifo_sink_sink_payload_data;
wire    [5:0] master_tx_fifo_sink_sink_payload_len;
wire    [7:0] master_tx_fifo_sink_sink_payload_mask;
wire    [3:0] master_tx_fifo_sink_sink_payload_width;
wire          master_tx_fifo_sink_sink_ready;
wire          master_tx_fifo_sink_sink_valid;
wire          master_tx_fifo_source_source_first;
wire          master_tx_fifo_source_source_last;
wire   [31:0] master_tx_fifo_source_source_payload_data;
wire    [5:0] master_tx_fifo_source_source_payload_len;
wire    [7:0] master_tx_fifo_source_source_payload_mask;
wire    [3:0] master_tx_fifo_source_source_payload_width;
wire          master_tx_fifo_source_source_ready;
wire          master_tx_fifo_source_source_valid;
wire          master_tx_ready;
wire    [3:0] master_width;
wire          mgmt_soc_wbm_ack;
wire   [29:0] mgmt_soc_wbm_adr;
reg     [1:0] mgmt_soc_wbm_bte = 2'd0;
reg     [2:0] mgmt_soc_wbm_cti = 3'd0;
wire          mgmt_soc_wbm_cyc;
wire   [31:0] mgmt_soc_wbm_dat_r;
wire   [31:0] mgmt_soc_wbm_dat_w;
wire          mgmt_soc_wbm_err;
wire    [3:0] mgmt_soc_wbm_sel;
wire          mgmt_soc_wbm_stb;
wire          mgmt_soc_wbm_we;
wire          por_clk;
wire          port_master_internal_port_sink_first;
wire          port_master_internal_port_sink_last;
wire   [31:0] port_master_internal_port_sink_payload_data;
wire    [5:0] port_master_internal_port_sink_payload_len;
wire    [7:0] port_master_internal_port_sink_payload_mask;
wire    [3:0] port_master_internal_port_sink_payload_width;
wire          port_master_internal_port_sink_ready;
wire          port_master_internal_port_sink_valid;
wire          port_master_internal_port_source_first;
wire          port_master_internal_port_source_last;
wire   [31:0] port_master_internal_port_source_payload_data;
wire          port_master_internal_port_source_ready;
wire          port_master_internal_port_source_valid;
wire          port_master_request;
wire          port_master_user_port_sink_first;
wire          port_master_user_port_sink_last;
wire   [31:0] port_master_user_port_sink_payload_data;
wire    [5:0] port_master_user_port_sink_payload_len;
wire    [7:0] port_master_user_port_sink_payload_mask;
wire    [3:0] port_master_user_port_sink_payload_width;
wire          port_master_user_port_sink_ready;
wire          port_master_user_port_sink_valid;
wire          port_master_user_port_source_first;
wire          port_master_user_port_source_last;
wire   [31:0] port_master_user_port_source_payload_data;
wire          port_master_user_port_source_ready;
wire          port_master_user_port_source_valid;
wire          port_mmap_internal_port_sink_first;
wire          port_mmap_internal_port_sink_last;
wire   [31:0] port_mmap_internal_port_sink_payload_data;
wire    [5:0] port_mmap_internal_port_sink_payload_len;
wire    [7:0] port_mmap_internal_port_sink_payload_mask;
wire    [3:0] port_mmap_internal_port_sink_payload_width;
wire          port_mmap_internal_port_sink_ready;
wire          port_mmap_internal_port_sink_valid;
wire          port_mmap_internal_port_source_first;
wire          port_mmap_internal_port_source_last;
wire   [31:0] port_mmap_internal_port_source_payload_data;
wire          port_mmap_internal_port_source_ready;
wire          port_mmap_internal_port_source_valid;
wire          port_mmap_request;
wire          port_mmap_user_port_sink_first;
wire          port_mmap_user_port_sink_last;
wire   [31:0] port_mmap_user_port_sink_payload_data;
wire    [5:0] port_mmap_user_port_sink_payload_len;
wire    [7:0] port_mmap_user_port_sink_payload_mask;
wire    [3:0] port_mmap_user_port_sink_payload_width;
wire          port_mmap_user_port_sink_ready;
wire          port_mmap_user_port_sink_valid;
wire          port_mmap_user_port_source_first;
wire          port_mmap_user_port_source_last;
wire   [31:0] port_mmap_user_port_source_payload_data;
wire          port_mmap_user_port_source_ready;
wire          port_mmap_user_port_source_valid;
reg           re = 1'd0;
wire    [2:0] request;
reg           reset = 1'd0;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [1:0] slave_sel = 2'd0;
reg     [1:0] slave_sel_r = 2'd0;
wire   [15:0] spi_master_clk_divider0;
reg    [15:0] spi_master_clk_divider1 = 16'd0;
reg           spi_master_clk_enable = 1'd0;
wire          spi_master_clk_fall;
wire          spi_master_clk_rise;
reg           spi_master_control_re = 1'd0;
reg    [15:0] spi_master_control_storage = 16'd0;
reg     [2:0] spi_master_count = 3'd0;
reg     [2:0] spi_master_count_spimaster_next_value = 3'd0;
reg           spi_master_count_spimaster_next_value_ce = 1'd0;
wire          spi_master_cs;
wire          spi_master_cs_mode;
reg           spi_master_cs_re = 1'd0;
reg    [16:0] spi_master_cs_storage = 17'd1;
reg           spi_master_done0 = 1'd0;
wire          spi_master_done1;
reg           spi_master_irq = 1'd0;
wire    [7:0] spi_master_length0;
wire    [7:0] spi_master_length1;
wire          spi_master_loopback;
reg           spi_master_loopback_re = 1'd0;
reg           spi_master_loopback_storage = 1'd0;
reg     [7:0] spi_master_miso = 8'd0;
reg     [7:0] spi_master_miso_data = 8'd0;
reg           spi_master_miso_latch = 1'd0;
reg           spi_master_miso_re = 1'd0;
wire    [7:0] spi_master_miso_status;
wire          spi_master_miso_we;
wire          spi_master_mode0;
wire          spi_master_mode1;
wire          spi_master_mode2;
wire    [7:0] spi_master_mosi;
reg     [7:0] spi_master_mosi_data = 8'd0;
reg           spi_master_mosi_latch = 1'd0;
reg           spi_master_mosi_re = 1'd0;
reg     [2:0] spi_master_mosi_sel = 3'd0;
reg     [7:0] spi_master_mosi_storage = 8'd0;
wire          spi_master_sel;
wire          spi_master_start0;
reg           spi_master_start1 = 1'd0;
reg           spi_master_status_re = 1'd0;
reg     [1:0] spi_master_status_status = 2'd0;
wire          spi_master_status_we;
reg           spi_master_xfer_enable = 1'd0;
reg    [15:0] storage = 16'd1000;
reg           sync_array_muxed = 1'd0;
wire          sys_clk;
wire          sys_rst;
reg           timer0_en_re = 1'd0;
reg           timer0_en_storage = 1'd0;
reg           timer0_enable_re = 1'd0;
reg           timer0_enable_storage = 1'd0;
wire          timer0_irq;
reg           timer0_load_re = 1'd0;
reg    [31:0] timer0_load_storage = 32'd0;
reg           timer0_pending_r = 1'd0;
reg           timer0_pending_re = 1'd0;
reg           timer0_pending_status = 1'd0;
wire          timer0_pending_we;
reg           timer0_reload_re = 1'd0;
reg    [31:0] timer0_reload_storage = 32'd0;
reg           timer0_status_re = 1'd0;
reg           timer0_status_status = 1'd0;
wire          timer0_status_we;
reg           timer0_update_value_re = 1'd0;
reg           timer0_update_value_storage = 1'd0;
reg    [31:0] timer0_value = 32'd0;
reg           timer0_value_re = 1'd0;
reg    [31:0] timer0_value_status = 32'd0;
wire          timer0_value_we;
wire          timer0_zero0;
wire          timer0_zero1;
wire          timer0_zero2;
reg           timer0_zero_clear = 1'd0;
reg           timer0_zero_pending = 1'd0;
wire          timer0_zero_status;
wire          timer0_zero_trigger;
reg           timer0_zero_trigger_d = 1'd0;
reg           timer1_en_re = 1'd0;
reg           timer1_en_storage = 1'd0;
reg           timer1_enable_re = 1'd0;
reg           timer1_enable_storage = 1'd0;
wire          timer1_irq;
reg           timer1_load_re = 1'd0;
reg    [31:0] timer1_load_storage = 32'd0;
reg           timer1_pending_r = 1'd0;
reg           timer1_pending_re = 1'd0;
reg           timer1_pending_status = 1'd0;
wire          timer1_pending_we;
reg           timer1_reload_re = 1'd0;
reg    [31:0] timer1_reload_storage = 32'd0;
reg           timer1_status_re = 1'd0;
reg           timer1_status_status = 1'd0;
wire          timer1_status_we;
reg           timer1_update_value_re = 1'd0;
reg           timer1_update_value_storage = 1'd0;
reg    [31:0] timer1_value = 32'd0;
reg           timer1_value_re = 1'd0;
reg    [31:0] timer1_value_status = 32'd0;
wire          timer1_value_we;
wire          timer1_zero0;
wire          timer1_zero1;
wire          timer1_zero2;
reg           timer1_zero_clear = 1'd0;
reg           timer1_zero_pending = 1'd0;
wire          timer1_zero_status;
wire          timer1_zero_trigger;
reg           timer1_zero_trigger_d = 1'd0;
reg    [31:0] vexriscv = 32'd0;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign mgmt_soc_wbm_stb = wbs_stb_i;
assign mgmt_soc_wbm_cyc = wbs_cyc_i;
assign mgmt_soc_wbm_we = wbs_we_i;
assign mgmt_soc_wbm_sel = wbs_sel_i;
assign mgmt_soc_wbm_adr = wbs_adr_i;
assign mgmt_soc_wbm_dat_w = wbs_dat_i;
assign wbs_ack_o = mgmt_soc_wbm_ack;
assign wbs_dat_o = mgmt_soc_wbm_dat_r;
assign user_irq = 1'd0;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[0] <= timer0_irq;
    interrupt[1] <= timer1_irq;
end
assign sys_clk = wb_clk_i;
assign por_clk = wb_clk_i;
assign sys_rst = int_rst;
assign shared_adr = comb_array_muxed0;
assign shared_dat_w = comb_array_muxed1;
assign shared_sel = comb_array_muxed2;
assign shared_cyc = comb_array_muxed3;
assign shared_stb = comb_array_muxed4;
assign shared_we = comb_array_muxed5;
assign shared_cti = comb_array_muxed6;
assign shared_bte = comb_array_muxed7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign mgmt_soc_wbm_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign mgmt_soc_wbm_ack = (shared_ack & (grant == 2'd2));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign mgmt_soc_wbm_err = (shared_err & (grant == 2'd2));
assign request = {mgmt_soc_wbm_cyc, dbus_cyc, ibus_cyc};
always @(*) begin
    slave_sel <= 2'd0;
    slave_sel[0] <= (shared_adr[29:22] == 1'd0);
    slave_sel[1] <= (shared_adr[29:14] == 16'd61440);
end
assign litespimmap_bus_adr = shared_adr;
assign litespimmap_bus_dat_w = shared_dat_w;
assign litespimmap_bus_sel = shared_sel;
assign litespimmap_bus_stb = shared_stb;
assign litespimmap_bus_we = shared_we;
assign litespimmap_bus_cti = shared_cti;
assign litespimmap_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign litespimmap_bus_cyc = (shared_cyc & slave_sel[0]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[1]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= (litespimmap_bus_ack | basesoc_wishbone_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = (litespimmap_bus_err | basesoc_wishbone_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= (({32{slave_sel_r[0]}} & litespimmap_bus_dat_r) | ({32{slave_sel_r[1]}} & basesoc_wishbone_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign litespisdrphycore_div = litespisdrphycore_spi_clk_divisor;
assign litespisdrphycore_sample_cnt = 1'd1;
assign litespisdrphycore_update_cnt = 1'd1;
assign litespisdrphycore_wait = litespisdrphycore_cs;
assign litespisdrphycore_cs_enable = litespisdrphycore_done;
assign spiflash4x_cs_n = (~litespisdrphycore_cs_enable);
assign litespisdrphycore_dq_oe = litespisdrphycore_sink_payload_mask;
always @(*) begin
    litespisdrphycore_dq_o <= 4'd0;
    case (litespisdrphycore_sink_payload_width)
        1'd1: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31];
        end
        2'd2: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:30];
        end
        3'd4: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:28];
        end
        4'd8: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:24];
        end
    endcase
end
assign litespisdrphycore_source_payload_data = litespisdrphycore_sr_in;
assign litespisdrphycore_spi_clk_divisor = litespisdrphycore_storage;
assign litespisdrphycore_posedge = ((litespisdrphycore_en & (~litespisdrphycore_clk)) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_negedge = ((litespisdrphycore_en & litespisdrphycore_clk) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_sample = (litespisdrphycore_cnt == litespisdrphycore_sample_cnt);
assign litespisdrphycore_update = (litespisdrphycore_cnt == litespisdrphycore_update_cnt);
assign litespisdrphycore_done = (litespisdrphycore_count == 1'd0);
always @(*) begin
    basesoc_litespiphy_next_state <= 2'd0;
    basesoc_litespiphy_next_state <= basesoc_litespiphy_state;
    case (basesoc_litespiphy_state)
        1'd1: begin
            if (litespisdrphycore_negedge) begin
                if ((litespisdrphycore_sr_cnt == 1'd0)) begin
                    basesoc_litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
                basesoc_litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litespisdrphycore_source_ready) begin
                basesoc_litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                basesoc_litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sr_out_load <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                litespisdrphycore_sr_out_load <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litespisdrphycore_source_last <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litespisdrphycore_source_last <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sink_ready <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
            if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
                litespisdrphycore_sink_ready <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespisdrphycore_en <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
            litespisdrphycore_en <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sr_cnt - litespisdrphycore_sink_payload_width);
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sink_payload_len - litespisdrphycore_sink_payload_width);
            end
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sr_out_shift <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_out_shift <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespisdrphycore_source_valid <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litespisdrphycore_source_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespisdrphycore_sr_in_shift <= 1'd0;
    case (basesoc_litespiphy_state)
        1'd1: begin
            if (litespisdrphycore_posedge_reg2) begin
                litespisdrphycore_sr_in_shift <= 1'd1;
            end
        end
        2'd2: begin
            if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
                litespisdrphycore_sr_in_shift <= (litespisdrphycore_spi_clk_divisor == 1'd0);
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign litespisdrphycore_cs = crossbar_cs;
assign litespimmap_sink_valid = port_mmap_user_port_source_valid;
assign port_mmap_user_port_source_ready = litespimmap_sink_ready;
assign litespimmap_sink_first = port_mmap_user_port_source_first;
assign litespimmap_sink_last = port_mmap_user_port_source_last;
assign litespimmap_sink_payload_data = port_mmap_user_port_source_payload_data;
assign port_mmap_user_port_sink_valid = litespimmap_source_valid;
assign litespimmap_source_ready = port_mmap_user_port_sink_ready;
assign port_mmap_user_port_sink_first = litespimmap_source_first;
assign port_mmap_user_port_sink_last = litespimmap_source_last;
assign port_mmap_user_port_sink_payload_data = litespimmap_source_payload_data;
assign port_mmap_user_port_sink_payload_len = litespimmap_source_payload_len;
assign port_mmap_user_port_sink_payload_width = litespimmap_source_payload_width;
assign port_mmap_user_port_sink_payload_mask = litespimmap_source_payload_mask;
assign master_sink_valid = port_master_user_port_source_valid;
assign port_master_user_port_source_ready = master_sink_ready;
assign master_sink_first = port_master_user_port_source_first;
assign master_sink_last = port_master_user_port_source_last;
assign master_sink_payload_data = port_master_user_port_source_payload_data;
assign port_master_user_port_sink_valid = master_source_valid;
assign master_source_ready = port_master_user_port_sink_ready;
assign port_master_user_port_sink_first = master_source_first;
assign port_master_user_port_sink_last = master_source_last;
assign port_master_user_port_sink_payload_data = master_source_payload_data;
assign port_master_user_port_sink_payload_len = master_source_payload_len;
assign port_master_user_port_sink_payload_width = master_source_payload_width;
assign port_master_user_port_sink_payload_mask = master_source_payload_mask;
assign litespisdrphycore_sink_valid = crossbar_source_valid;
assign crossbar_source_ready = litespisdrphycore_sink_ready;
assign litespisdrphycore_sink_first = crossbar_source_first;
assign litespisdrphycore_sink_last = crossbar_source_last;
assign litespisdrphycore_sink_payload_data = crossbar_source_payload_data;
assign litespisdrphycore_sink_payload_len = crossbar_source_payload_len;
assign litespisdrphycore_sink_payload_width = crossbar_source_payload_width;
assign litespisdrphycore_sink_payload_mask = crossbar_source_payload_mask;
assign crossbar_sink_valid = litespisdrphycore_source_valid;
assign litespisdrphycore_source_ready = crossbar_sink_ready;
assign crossbar_sink_first = litespisdrphycore_source_first;
assign crossbar_sink_last = litespisdrphycore_source_last;
assign crossbar_sink_payload_data = litespisdrphycore_source_payload_data;
assign port_mmap_internal_port_sink_valid = port_mmap_user_port_sink_valid;
assign port_mmap_user_port_sink_ready = port_mmap_internal_port_sink_ready;
assign port_mmap_internal_port_sink_first = port_mmap_user_port_sink_first;
assign port_mmap_internal_port_sink_last = port_mmap_user_port_sink_last;
assign port_mmap_internal_port_sink_payload_data = port_mmap_user_port_sink_payload_data;
assign port_mmap_internal_port_sink_payload_len = port_mmap_user_port_sink_payload_len;
assign port_mmap_internal_port_sink_payload_width = port_mmap_user_port_sink_payload_width;
assign port_mmap_internal_port_sink_payload_mask = port_mmap_user_port_sink_payload_mask;
assign port_mmap_user_port_source_valid = port_mmap_internal_port_source_valid;
assign port_mmap_internal_port_source_ready = port_mmap_user_port_source_ready;
assign port_mmap_user_port_source_first = port_mmap_internal_port_source_first;
assign port_mmap_user_port_source_last = port_mmap_internal_port_source_last;
assign port_mmap_user_port_source_payload_data = port_mmap_internal_port_source_payload_data;
assign port_mmap_request = litespimmap_cs;
assign port_master_internal_port_sink_valid = port_master_user_port_sink_valid;
assign port_master_user_port_sink_ready = port_master_internal_port_sink_ready;
assign port_master_internal_port_sink_first = port_master_user_port_sink_first;
assign port_master_internal_port_sink_last = port_master_user_port_sink_last;
assign port_master_internal_port_sink_payload_data = port_master_user_port_sink_payload_data;
assign port_master_internal_port_sink_payload_len = port_master_user_port_sink_payload_len;
assign port_master_internal_port_sink_payload_width = port_master_user_port_sink_payload_width;
assign port_master_internal_port_sink_payload_mask = port_master_user_port_sink_payload_mask;
assign port_master_user_port_source_valid = port_master_internal_port_source_valid;
assign port_master_internal_port_source_ready = port_master_user_port_source_ready;
assign port_master_user_port_source_first = port_master_internal_port_source_first;
assign port_master_user_port_source_last = port_master_internal_port_source_last;
assign port_master_user_port_source_payload_data = port_master_internal_port_source_payload_data;
assign port_master_request = master_cs;
assign basesoc_litespi_tx_mux_endpoint0_sink_valid = port_mmap_internal_port_sink_valid;
assign port_mmap_internal_port_sink_ready = basesoc_litespi_tx_mux_endpoint0_sink_ready;
assign basesoc_litespi_tx_mux_endpoint0_sink_first = port_mmap_internal_port_sink_first;
assign basesoc_litespi_tx_mux_endpoint0_sink_last = port_mmap_internal_port_sink_last;
assign basesoc_litespi_tx_mux_endpoint0_sink_payload_data = port_mmap_internal_port_sink_payload_data;
assign basesoc_litespi_tx_mux_endpoint0_sink_payload_len = port_mmap_internal_port_sink_payload_len;
assign basesoc_litespi_tx_mux_endpoint0_sink_payload_width = port_mmap_internal_port_sink_payload_width;
assign basesoc_litespi_tx_mux_endpoint0_sink_payload_mask = port_mmap_internal_port_sink_payload_mask;
assign port_mmap_internal_port_source_valid = basesoc_litespi_rx_demux_endpoint0_source_valid;
assign basesoc_litespi_rx_demux_endpoint0_source_ready = port_mmap_internal_port_source_ready;
assign port_mmap_internal_port_source_first = basesoc_litespi_rx_demux_endpoint0_source_first;
assign port_mmap_internal_port_source_last = basesoc_litespi_rx_demux_endpoint0_source_last;
assign port_mmap_internal_port_source_payload_data = basesoc_litespi_rx_demux_endpoint0_source_payload_data;
assign basesoc_litespi_tx_mux_endpoint1_sink_valid = port_master_internal_port_sink_valid;
assign port_master_internal_port_sink_ready = basesoc_litespi_tx_mux_endpoint1_sink_ready;
assign basesoc_litespi_tx_mux_endpoint1_sink_first = port_master_internal_port_sink_first;
assign basesoc_litespi_tx_mux_endpoint1_sink_last = port_master_internal_port_sink_last;
assign basesoc_litespi_tx_mux_endpoint1_sink_payload_data = port_master_internal_port_sink_payload_data;
assign basesoc_litespi_tx_mux_endpoint1_sink_payload_len = port_master_internal_port_sink_payload_len;
assign basesoc_litespi_tx_mux_endpoint1_sink_payload_width = port_master_internal_port_sink_payload_width;
assign basesoc_litespi_tx_mux_endpoint1_sink_payload_mask = port_master_internal_port_sink_payload_mask;
assign port_master_internal_port_source_valid = basesoc_litespi_rx_demux_endpoint1_source_valid;
assign basesoc_litespi_rx_demux_endpoint1_source_ready = port_master_internal_port_source_ready;
assign port_master_internal_port_source_first = basesoc_litespi_rx_demux_endpoint1_source_first;
assign port_master_internal_port_source_last = basesoc_litespi_rx_demux_endpoint1_source_last;
assign port_master_internal_port_source_payload_data = basesoc_litespi_rx_demux_endpoint1_source_payload_data;
assign basesoc_litespi_request = {port_master_request, port_mmap_request};
assign crossbar_source_valid = basesoc_litespi_tx_mux_source_valid;
assign basesoc_litespi_tx_mux_source_ready = crossbar_source_ready;
assign crossbar_source_first = basesoc_litespi_tx_mux_source_first;
assign crossbar_source_last = basesoc_litespi_tx_mux_source_last;
assign crossbar_source_payload_data = basesoc_litespi_tx_mux_source_payload_data;
assign crossbar_source_payload_len = basesoc_litespi_tx_mux_source_payload_len;
assign crossbar_source_payload_width = basesoc_litespi_tx_mux_source_payload_width;
assign crossbar_source_payload_mask = basesoc_litespi_tx_mux_source_payload_mask;
assign basesoc_litespi_tx_mux_sel = basesoc_litespi_grant;
assign basesoc_litespi_rx_demux_sink_valid = crossbar_sink_valid;
assign crossbar_sink_ready = basesoc_litespi_rx_demux_sink_ready;
assign basesoc_litespi_rx_demux_sink_first = crossbar_sink_first;
assign basesoc_litespi_rx_demux_sink_last = crossbar_sink_last;
assign basesoc_litespi_rx_demux_sink_payload_data = crossbar_sink_payload_data;
assign basesoc_litespi_rx_demux_sel = basesoc_litespi_grant;
always @(*) begin
    crossbar_cs <= 1'd0;
    case (basesoc_litespi_grant)
        1'd0: begin
            crossbar_cs <= litespimmap_cs;
        end
        1'd1: begin
            crossbar_cs <= master_cs;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_payload_data <= 32'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_payload_data <= basesoc_litespi_tx_mux_endpoint0_sink_payload_data;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_payload_data <= basesoc_litespi_tx_mux_endpoint1_sink_payload_data;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_payload_len <= 6'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_payload_len <= basesoc_litespi_tx_mux_endpoint0_sink_payload_len;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_payload_len <= basesoc_litespi_tx_mux_endpoint1_sink_payload_len;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_payload_width <= 4'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_payload_width <= basesoc_litespi_tx_mux_endpoint0_sink_payload_width;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_payload_width <= basesoc_litespi_tx_mux_endpoint1_sink_payload_width;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_payload_mask <= 8'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_payload_mask <= basesoc_litespi_tx_mux_endpoint0_sink_payload_mask;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_payload_mask <= basesoc_litespi_tx_mux_endpoint1_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_endpoint0_sink_ready <= basesoc_litespi_tx_mux_source_ready;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_valid <= 1'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_valid <= basesoc_litespi_tx_mux_endpoint0_sink_valid;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_valid <= basesoc_litespi_tx_mux_endpoint1_sink_valid;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
        end
        1'd1: begin
            basesoc_litespi_tx_mux_endpoint1_sink_ready <= basesoc_litespi_tx_mux_source_ready;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_first <= 1'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_first <= basesoc_litespi_tx_mux_endpoint0_sink_first;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_first <= basesoc_litespi_tx_mux_endpoint1_sink_first;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_tx_mux_source_last <= 1'd0;
    case (basesoc_litespi_tx_mux_sel)
        1'd0: begin
            basesoc_litespi_tx_mux_source_last <= basesoc_litespi_tx_mux_endpoint0_sink_last;
        end
        1'd1: begin
            basesoc_litespi_tx_mux_source_last <= basesoc_litespi_tx_mux_endpoint1_sink_last;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint1_source_valid <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            basesoc_litespi_rx_demux_endpoint1_source_valid <= basesoc_litespi_rx_demux_sink_valid;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint1_source_first <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            basesoc_litespi_rx_demux_endpoint1_source_first <= basesoc_litespi_rx_demux_sink_first;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint1_source_last <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            basesoc_litespi_rx_demux_endpoint1_source_last <= basesoc_litespi_rx_demux_sink_last;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            basesoc_litespi_rx_demux_endpoint1_source_payload_data <= basesoc_litespi_rx_demux_sink_payload_data;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_sink_ready <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
            basesoc_litespi_rx_demux_sink_ready <= basesoc_litespi_rx_demux_endpoint0_source_ready;
        end
        1'd1: begin
            basesoc_litespi_rx_demux_sink_ready <= basesoc_litespi_rx_demux_endpoint1_source_ready;
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint0_source_valid <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
            basesoc_litespi_rx_demux_endpoint0_source_valid <= basesoc_litespi_rx_demux_sink_valid;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint0_source_first <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
            basesoc_litespi_rx_demux_endpoint0_source_first <= basesoc_litespi_rx_demux_sink_first;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint0_source_last <= 1'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
            basesoc_litespi_rx_demux_endpoint0_source_last <= basesoc_litespi_rx_demux_sink_last;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    basesoc_litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
    case (basesoc_litespi_rx_demux_sel)
        1'd0: begin
            basesoc_litespi_rx_demux_endpoint0_source_payload_data <= basesoc_litespi_rx_demux_sink_payload_data;
        end
        1'd1: begin
        end
    endcase
end
assign litespimmap_spi_dummy_bits = litespimmap_storage;
assign litespimmap_done = (litespimmap_count == 1'd0);
always @(*) begin
    basesoc_litespi_next_state <= 4'd0;
    basesoc_litespi_next_state <= basesoc_litespi_state;
    case (basesoc_litespi_state)
        1'd1: begin
            if (litespimmap_source_ready) begin
                basesoc_litespi_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (litespimmap_sink_valid) begin
                basesoc_litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litespimmap_source_ready) begin
                basesoc_litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            if (litespimmap_sink_valid) begin
                if ((litespimmap_spi_dummy_bits == 1'd0)) begin
                    basesoc_litespi_next_state <= 3'd7;
                end else begin
                    basesoc_litespi_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            if (litespimmap_source_ready) begin
                basesoc_litespi_next_state <= 3'd6;
            end
        end
        3'd6: begin
            if (litespimmap_sink_valid) begin
                basesoc_litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            if (litespimmap_source_ready) begin
                basesoc_litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            if (litespimmap_sink_valid) begin
                basesoc_litespi_next_state <= 1'd0;
            end
        end
        default: begin
            if (((litespimmap_bus_cyc & litespimmap_bus_stb) & (~litespimmap_bus_we))) begin
                if ((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr))) begin
                    basesoc_litespi_next_state <= 3'd7;
                end else begin
                    basesoc_litespi_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litespimmap_source_payload_len <= 6'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_source_payload_len <= 4'd8;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_source_payload_len <= 5'd24;
        end
        3'd4: begin
        end
        3'd5: begin
            litespimmap_source_payload_len <= litespimmap_spi_dummy_bits;
        end
        3'd6: begin
        end
        3'd7: begin
            litespimmap_source_payload_len <= 6'd32;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_source_payload_width <= 4'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_source_payload_width <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_source_payload_width <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            litespimmap_source_payload_width <= 1'd1;
        end
        3'd6: begin
        end
        3'd7: begin
            litespimmap_source_payload_width <= 3'd4;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_burst_adr_litespi_next_value1 <= 30'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_burst_adr_litespi_next_value1 <= litespimmap_bus_adr;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_burst_adr_litespi_next_value1 <= litespimmap_bus_adr;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (litespimmap_sink_valid) begin
                litespimmap_burst_adr_litespi_next_value1 <= (litespimmap_burst_adr + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_source_payload_mask <= 8'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_source_payload_mask <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_source_payload_mask <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            litespimmap_source_payload_mask <= 1'd1;
        end
        3'd6: begin
        end
        3'd7: begin
            litespimmap_source_payload_mask <= 1'd0;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (litespimmap_sink_valid) begin
                litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_cs <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_cs <= 1'd1;
        end
        2'd2: begin
            litespimmap_cs <= 1'd1;
        end
        2'd3: begin
            litespimmap_cs <= 1'd1;
        end
        3'd4: begin
            litespimmap_cs <= 1'd1;
        end
        3'd5: begin
            litespimmap_cs <= 1'd1;
        end
        3'd6: begin
            litespimmap_cs <= 1'd1;
        end
        3'd7: begin
            litespimmap_cs <= 1'd1;
        end
        4'd8: begin
            litespimmap_cs <= 1'd1;
        end
        default: begin
            litespimmap_cs <= litespimmap_burst_cs;
            if (((litespimmap_bus_cyc & litespimmap_bus_stb) & (~litespimmap_bus_we))) begin
                if ((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr))) begin
                end else begin
                    litespimmap_cs <= 1'd0;
                end
            end
        end
    endcase
end
always @(*) begin
    litespimmap_sink_ready <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
            litespimmap_sink_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litespimmap_sink_ready <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
            litespimmap_sink_ready <= 1'd1;
        end
        3'd7: begin
        end
        4'd8: begin
            litespimmap_sink_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_wait <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            litespimmap_wait <= 1'd1;
        end
    endcase
end
always @(*) begin
    litespimmap_bus_dat_r <= 32'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            litespimmap_bus_dat_r <= {litespimmap_sink_payload_data[7:0], litespimmap_sink_payload_data[15:8], litespimmap_sink_payload_data[23:16], litespimmap_sink_payload_data[31:24]};
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_burst_cs_litespi_next_value0 <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            litespimmap_burst_cs_litespi_next_value0 <= (litespimmap_burst_cs & (~litespimmap_done));
        end
    endcase
end
always @(*) begin
    litespimmap_source_valid <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_source_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_source_valid <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            litespimmap_source_valid <= 1'd1;
        end
        3'd6: begin
        end
        3'd7: begin
            litespimmap_source_valid <= 1'd1;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litespimmap_bus_ack <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (litespimmap_sink_valid) begin
                litespimmap_bus_ack <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_source_last <= 1'd0;
    case (basesoc_litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litespimmap_source_last <= 1'd1;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litespimmap_source_payload_data <= 32'd0;
    case (basesoc_litespi_state)
        1'd1: begin
            litespimmap_source_payload_data <= 7'd107;
        end
        2'd2: begin
        end
        2'd3: begin
            litespimmap_source_payload_data <= {litespimmap_bus_adr, litespimmap};
        end
        3'd4: begin
        end
        3'd5: begin
            litespimmap_source_payload_data <= litespimmap_dummy;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
assign master_rx_fifo_sink_sink_valid = master_sink_valid;
assign master_sink_ready = master_rx_fifo_sink_sink_ready;
assign master_rx_fifo_sink_sink_first = master_sink_first;
assign master_rx_fifo_sink_sink_last = master_sink_last;
assign master_rx_fifo_sink_sink_payload_data = master_sink_payload_data;
assign master_source_valid = master_tx_fifo_source_source_valid;
assign master_tx_fifo_source_source_ready = master_source_ready;
assign master_source_first = master_tx_fifo_source_source_first;
assign master_source_last = master_tx_fifo_source_source_last;
assign master_source_payload_data = master_tx_fifo_source_source_payload_data;
assign master_source_payload_len = master_tx_fifo_source_source_payload_len;
assign master_source_payload_width = master_tx_fifo_source_source_payload_width;
assign master_source_payload_mask = master_tx_fifo_source_source_payload_mask;
assign master_cs = master_cs_storage;
assign master_tx_fifo_sink_sink_valid = master_rxtx_re;
assign master_tx_ready = master_tx_fifo_sink_sink_ready;
assign master_tx_fifo_sink_sink_payload_data = master_rxtx_r;
assign master_tx_fifo_sink_sink_payload_len = master_len;
assign master_tx_fifo_sink_sink_payload_width = master_width;
assign master_tx_fifo_sink_sink_payload_mask = master_mask;
assign master_tx_fifo_sink_sink_last = 1'd1;
assign master_rx_fifo_source_source_ready = master_rxtx_we;
assign master_rx_ready = master_rx_fifo_source_source_valid;
assign master_rxtx_w = master_rx_fifo_source_source_payload_data;
assign master_tx_fifo_pipe_valid_sink_ready = ((~master_tx_fifo_pipe_valid_source_valid) | master_tx_fifo_pipe_valid_source_ready);
assign master_tx_fifo_pipe_valid_sink_valid = master_tx_fifo_sink_sink_valid;
assign master_tx_fifo_sink_sink_ready = master_tx_fifo_pipe_valid_sink_ready;
assign master_tx_fifo_pipe_valid_sink_first = master_tx_fifo_sink_sink_first;
assign master_tx_fifo_pipe_valid_sink_last = master_tx_fifo_sink_sink_last;
assign master_tx_fifo_pipe_valid_sink_payload_data = master_tx_fifo_sink_sink_payload_data;
assign master_tx_fifo_pipe_valid_sink_payload_len = master_tx_fifo_sink_sink_payload_len;
assign master_tx_fifo_pipe_valid_sink_payload_width = master_tx_fifo_sink_sink_payload_width;
assign master_tx_fifo_pipe_valid_sink_payload_mask = master_tx_fifo_sink_sink_payload_mask;
assign master_tx_fifo_source_source_valid = master_tx_fifo_pipe_valid_source_valid;
assign master_tx_fifo_pipe_valid_source_ready = master_tx_fifo_source_source_ready;
assign master_tx_fifo_source_source_first = master_tx_fifo_pipe_valid_source_first;
assign master_tx_fifo_source_source_last = master_tx_fifo_pipe_valid_source_last;
assign master_tx_fifo_source_source_payload_data = master_tx_fifo_pipe_valid_source_payload_data;
assign master_tx_fifo_source_source_payload_len = master_tx_fifo_pipe_valid_source_payload_len;
assign master_tx_fifo_source_source_payload_width = master_tx_fifo_pipe_valid_source_payload_width;
assign master_tx_fifo_source_source_payload_mask = master_tx_fifo_pipe_valid_source_payload_mask;
assign master_rx_fifo_pipe_valid_sink_ready = ((~master_rx_fifo_pipe_valid_source_valid) | master_rx_fifo_pipe_valid_source_ready);
assign master_rx_fifo_pipe_valid_sink_valid = master_rx_fifo_sink_sink_valid;
assign master_rx_fifo_sink_sink_ready = master_rx_fifo_pipe_valid_sink_ready;
assign master_rx_fifo_pipe_valid_sink_first = master_rx_fifo_sink_sink_first;
assign master_rx_fifo_pipe_valid_sink_last = master_rx_fifo_sink_sink_last;
assign master_rx_fifo_pipe_valid_sink_payload_data = master_rx_fifo_sink_sink_payload_data;
assign master_rx_fifo_source_source_valid = master_rx_fifo_pipe_valid_source_valid;
assign master_rx_fifo_pipe_valid_source_ready = master_rx_fifo_source_source_ready;
assign master_rx_fifo_source_source_first = master_rx_fifo_pipe_valid_source_first;
assign master_rx_fifo_source_source_last = master_rx_fifo_pipe_valid_source_last;
assign master_rx_fifo_source_source_payload_data = master_rx_fifo_pipe_valid_source_payload_data;
assign spi_master_start0 = spi_master_start1;
assign spi_master_length0 = spi_master_length1;
assign spi_master_done1 = spi_master_done0;
assign spi_master_mode0 = 1'd0;
assign spi_master_mosi = spi_master_mosi_storage;
assign spi_master_miso_status = spi_master_miso;
assign spi_master_cs = spi_master_sel;
assign spi_master_cs_mode = spi_master_mode1;
assign spi_master_loopback = spi_master_mode2;
assign spi_master_clk_rise = (spi_master_clk_divider1 == (spi_master_clk_divider0[15:1] - 1'd1));
assign spi_master_clk_fall = (spi_master_clk_divider1 == (spi_master_clk_divider0 - 1'd1));
assign spi_master_clk_divider0 = storage;
always @(*) begin
    basesoc_spimaster_next_state <= 2'd0;
    basesoc_spimaster_next_state <= basesoc_spimaster_state;
    case (basesoc_spimaster_state)
        1'd1: begin
            if (spi_master_clk_fall) begin
                basesoc_spimaster_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                if ((spi_master_count == (spi_master_length0 - 1'd1))) begin
                    basesoc_spimaster_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                basesoc_spimaster_next_state <= 1'd0;
            end
        end
        default: begin
            if (spi_master_start0) begin
                basesoc_spimaster_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    spi_master_done0 <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            spi_master_done0 <= 1'd1;
            if (spi_master_start0) begin
                spi_master_done0 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    spi_master_irq <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                spi_master_irq <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_count_spimaster_next_value <= 3'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
            spi_master_count_spimaster_next_value <= 1'd0;
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                spi_master_count_spimaster_next_value <= (spi_master_count + 1'd1);
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_clk_enable <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
        end
        2'd2: begin
            spi_master_clk_enable <= 1'd1;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_count_spimaster_next_value_ce <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
            spi_master_count_spimaster_next_value_ce <= 1'd1;
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                spi_master_count_spimaster_next_value_ce <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_xfer_enable <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
            if (spi_master_clk_fall) begin
                spi_master_xfer_enable <= 1'd1;
            end
        end
        2'd2: begin
            spi_master_xfer_enable <= 1'd1;
        end
        2'd3: begin
            spi_master_xfer_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_mosi_latch <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (spi_master_start0) begin
                spi_master_mosi_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    spi_master_miso_latch <= 1'd0;
    case (basesoc_spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                spi_master_miso_latch <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
assign timer0_zero_trigger = (timer0_value == 1'd0);
assign timer0_zero0 = timer0_zero_status;
assign timer0_zero1 = timer0_zero_pending;
always @(*) begin
    timer0_zero_clear <= 1'd0;
    if ((timer0_pending_re & timer0_pending_r)) begin
        timer0_zero_clear <= 1'd1;
    end
end
assign timer0_irq = (timer0_pending_status & timer0_enable_storage);
assign timer0_zero_status = timer0_zero_trigger;
assign timer1_zero_trigger = (timer1_value == 1'd0);
assign timer1_zero0 = timer1_zero_status;
assign timer1_zero1 = timer1_zero_pending;
always @(*) begin
    timer1_zero_clear <= 1'd0;
    if ((timer1_pending_re & timer1_pending_r)) begin
        timer1_zero_clear <= 1'd1;
    end
end
assign timer1_irq = (timer1_pending_status & timer1_enable_storage);
assign timer1_zero_status = timer1_zero_trigger;
always @(*) begin
    basesoc_wishbone2csr_next_state <= 1'd0;
    basesoc_wishbone2csr_next_state <= basesoc_wishbone2csr_state;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
            basesoc_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_wishbone_ack <= 1'd0;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
            basesoc_wishbone_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    basesoc_adr <= 14'd0;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_adr <= basesoc_wishbone_adr[29:0];
            end
        end
    endcase
end
always @(*) begin
    basesoc_we <= 1'd0;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    basesoc_dat_w <= 32'd0;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            basesoc_dat_w <= basesoc_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    basesoc_wishbone_dat_r <= 32'd0;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
            basesoc_wishbone_dat_r <= basesoc_dat_r;
        end
        default: begin
        end
    endcase
end
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd0);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[3:0];
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank0_control0_r = csr_bankarray_interface0_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank0_control0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_control0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank0_control0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_control0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
assign csr_bankarray_csrbank0_status_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_status_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_status_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_status_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_status_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_mosi0_r = csr_bankarray_interface0_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank0_mosi0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_mosi0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_mosi0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_mosi0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_miso_r = csr_bankarray_interface0_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank0_miso_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank0_miso_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank0_miso_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank0_miso_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
assign csr_bankarray_csrbank0_cs0_r = csr_bankarray_interface0_bank_bus_dat_w[16:0];
always @(*) begin
    csr_bankarray_csrbank0_cs0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank0_cs0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank0_cs0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank0_cs0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
assign csr_bankarray_csrbank0_loopback0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_loopback0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank0_loopback0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_loopback0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank0_loopback0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_clk_divider0_r = csr_bankarray_interface0_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank0_clk_divider0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank0_clk_divider0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank0_clk_divider0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank0_clk_divider0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    spi_master_start1 <= 1'd0;
    if (spi_master_control_re) begin
        spi_master_start1 <= spi_master_control_storage[0];
    end
end
assign spi_master_length1 = spi_master_control_storage[15:8];
assign csr_bankarray_csrbank0_control0_w = spi_master_control_storage[15:0];
always @(*) begin
    spi_master_status_status <= 2'd0;
    spi_master_status_status[0] <= spi_master_done1;
    spi_master_status_status[1] <= spi_master_mode0;
end
assign csr_bankarray_csrbank0_status_w = spi_master_status_status[1:0];
assign spi_master_status_we = csr_bankarray_csrbank0_status_we;
assign csr_bankarray_csrbank0_mosi0_w = spi_master_mosi_storage[7:0];
assign csr_bankarray_csrbank0_miso_w = spi_master_miso_status[7:0];
assign spi_master_miso_we = csr_bankarray_csrbank0_miso_we;
assign spi_master_sel = spi_master_cs_storage[0];
assign spi_master_mode1 = spi_master_cs_storage[16];
assign csr_bankarray_csrbank0_cs0_w = spi_master_cs_storage[16:0];
assign spi_master_mode2 = spi_master_loopback_storage;
assign csr_bankarray_csrbank0_loopback0_w = spi_master_loopback_storage;
assign csr_bankarray_csrbank0_clk_divider0_w = storage[15:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_mmap_dummy_bits0_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank1_mmap_dummy_bits0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_mmap_dummy_bits0_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_mmap_dummy_bits0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_mmap_dummy_bits0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_master_cs0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_master_cs0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_master_cs0_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_master_cs0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_master_cs0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_master_phyconfig0_r = csr_bankarray_interface1_bank_bus_dat_w[23:0];
always @(*) begin
    csr_bankarray_csrbank1_master_phyconfig0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_master_phyconfig0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank1_master_phyconfig0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_master_phyconfig0_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign master_rxtx_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    master_rxtx_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        master_rxtx_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    master_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        master_rxtx_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_master_status_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_master_status_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_master_status_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_master_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_master_status_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_mmap_dummy_bits0_w = litespimmap_storage[7:0];
assign csr_bankarray_csrbank1_master_cs0_w = master_cs_storage;
assign master_len = master_phyconfig_storage[7:0];
assign master_width = master_phyconfig_storage[11:8];
assign master_mask = master_phyconfig_storage[23:16];
assign csr_bankarray_csrbank1_master_phyconfig0_w = master_phyconfig_storage[23:0];
always @(*) begin
    master_status_status <= 2'd0;
    master_status_status[0] <= master_tx_ready;
    master_status_status[1] <= master_rx_ready;
end
assign csr_bankarray_csrbank1_master_status_w = master_status_status[1:0];
assign master_status_we = csr_bankarray_csrbank1_master_status_we;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_clk_divisor0_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank2_clk_divisor0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_clk_divisor0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank2_clk_divisor0_re <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_clk_divisor0_re <= csr_bankarray_interface2_bank_bus_we;
    end
end
assign csr_bankarray_csrbank2_clk_divisor0_w = litespisdrphycore_storage[7:0];
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank3_load0_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_load0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_load0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_load0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_reload0_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_reload0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_reload0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank3_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_reload0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_en0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_en0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_en0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_update_value0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_update_value0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_update_value0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_value_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_value_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_value_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank3_value_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_value_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_status_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_ev_pending_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_ev_enable0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_load0_w = timer0_load_storage[31:0];
assign csr_bankarray_csrbank3_reload0_w = timer0_reload_storage[31:0];
assign csr_bankarray_csrbank3_en0_w = timer0_en_storage;
assign csr_bankarray_csrbank3_update_value0_w = timer0_update_value_storage;
assign csr_bankarray_csrbank3_value_w = timer0_value_status[31:0];
assign timer0_value_we = csr_bankarray_csrbank3_value_we;
always @(*) begin
    timer0_status_status <= 1'd0;
    timer0_status_status <= timer0_zero0;
end
assign csr_bankarray_csrbank3_ev_status_w = timer0_status_status;
assign timer0_status_we = csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    timer0_pending_status <= 1'd0;
    timer0_pending_status <= timer0_zero1;
end
assign csr_bankarray_csrbank3_ev_pending_w = timer0_pending_status;
assign timer0_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign timer0_zero2 = timer0_enable_storage;
assign csr_bankarray_csrbank3_ev_enable0_w = timer0_enable_storage;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank4_load0_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank4_load0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_load0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank4_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_load0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_reload0_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank4_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_reload0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank4_reload0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_reload0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
assign csr_bankarray_csrbank4_en0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_en0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank4_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_en0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_update_value0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_update_value0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank4_update_value0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_update_value0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
assign csr_bankarray_csrbank4_value_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank4_value_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_value_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank4_value_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_value_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
assign csr_bankarray_csrbank4_ev_status_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_ev_status_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_ev_status_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_ev_pending_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_ev_pending_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_ev_pending_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_ev_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_ev_enable0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_ev_enable0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
assign csr_bankarray_csrbank4_load0_w = timer1_load_storage[31:0];
assign csr_bankarray_csrbank4_reload0_w = timer1_reload_storage[31:0];
assign csr_bankarray_csrbank4_en0_w = timer1_en_storage;
assign csr_bankarray_csrbank4_update_value0_w = timer1_update_value_storage;
assign csr_bankarray_csrbank4_value_w = timer1_value_status[31:0];
assign timer1_value_we = csr_bankarray_csrbank4_value_we;
always @(*) begin
    timer1_status_status <= 1'd0;
    timer1_status_status <= timer1_zero0;
end
assign csr_bankarray_csrbank4_ev_status_w = timer1_status_status;
assign timer1_status_we = csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    timer1_pending_status <= 1'd0;
    timer1_pending_status <= timer1_zero1;
end
assign csr_bankarray_csrbank4_ev_pending_w = timer1_pending_status;
assign timer1_pending_we = csr_bankarray_csrbank4_ev_pending_we;
assign timer1_zero2 = timer1_enable_storage;
assign csr_bankarray_csrbank4_ev_enable0_w = timer1_enable_storage;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    comb_array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed0 <= ibus_adr;
        end
        1'd1: begin
            comb_array_muxed0 <= dbus_adr;
        end
        default: begin
            comb_array_muxed0 <= mgmt_soc_wbm_adr;
        end
    endcase
end
always @(*) begin
    comb_array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed1 <= ibus_dat_w;
        end
        1'd1: begin
            comb_array_muxed1 <= dbus_dat_w;
        end
        default: begin
            comb_array_muxed1 <= mgmt_soc_wbm_dat_w;
        end
    endcase
end
always @(*) begin
    comb_array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed2 <= ibus_sel;
        end
        1'd1: begin
            comb_array_muxed2 <= dbus_sel;
        end
        default: begin
            comb_array_muxed2 <= mgmt_soc_wbm_sel;
        end
    endcase
end
always @(*) begin
    comb_array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed3 <= ibus_cyc;
        end
        1'd1: begin
            comb_array_muxed3 <= dbus_cyc;
        end
        default: begin
            comb_array_muxed3 <= mgmt_soc_wbm_cyc;
        end
    endcase
end
always @(*) begin
    comb_array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed4 <= ibus_stb;
        end
        1'd1: begin
            comb_array_muxed4 <= dbus_stb;
        end
        default: begin
            comb_array_muxed4 <= mgmt_soc_wbm_stb;
        end
    endcase
end
always @(*) begin
    comb_array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed5 <= ibus_we;
        end
        1'd1: begin
            comb_array_muxed5 <= dbus_we;
        end
        default: begin
            comb_array_muxed5 <= mgmt_soc_wbm_we;
        end
    endcase
end
always @(*) begin
    comb_array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed6 <= ibus_cti;
        end
        1'd1: begin
            comb_array_muxed6 <= dbus_cti;
        end
        default: begin
            comb_array_muxed6 <= mgmt_soc_wbm_cti;
        end
    endcase
end
always @(*) begin
    comb_array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed7 <= ibus_bte;
        end
        1'd1: begin
            comb_array_muxed7 <= dbus_bte;
        end
        default: begin
            comb_array_muxed7 <= mgmt_soc_wbm_bte;
        end
    endcase
end
always @(*) begin
    sync_array_muxed <= 1'd0;
    case (spi_master_mosi_sel)
        1'd0: begin
            sync_array_muxed <= spi_master_mosi_data[0];
        end
        1'd1: begin
            sync_array_muxed <= spi_master_mosi_data[1];
        end
        2'd2: begin
            sync_array_muxed <= spi_master_mosi_data[2];
        end
        2'd3: begin
            sync_array_muxed <= spi_master_mosi_data[3];
        end
        3'd4: begin
            sync_array_muxed <= spi_master_mosi_data[4];
        end
        3'd5: begin
            sync_array_muxed <= spi_master_mosi_data[5];
        end
        3'd6: begin
            sync_array_muxed <= spi_master_mosi_data[6];
        end
        default: begin
            sync_array_muxed <= spi_master_mosi_data[7];
        end
    endcase
end
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign sdrio_clk_4 = sys_clk;
assign sdrio_clk_5 = sys_clk;
assign sdrio_clk_6 = sys_clk;
assign sdrio_clk_7 = sys_clk;
assign sdrio_clk_8 = sys_clk;
assign sdrio_clk_9 = sys_clk;
assign sdrio_clk_10 = sys_clk;
assign sdrio_clk_11 = sys_clk;
assign sdrio_clk_12 = sys_clk;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= wb_rst_i;
end

always @(posedge sdrio_clk) begin
    spiflash4x_clk <= litespisdrphycore_clk;
    inferedsdrtristate0_oe <= litespisdrphycore_dq_oe[0];
    inferedsdrtristate1_oe <= litespisdrphycore_dq_oe[1];
    inferedsdrtristate2_oe <= litespisdrphycore_dq_oe[2];
    inferedsdrtristate3_oe <= litespisdrphycore_dq_oe[3];
    inferedsdrtristate0__o <= litespisdrphycore_dq_o[0];
    litespisdrphycore_dq_i[0] <= inferedsdrtristate0__i;
    inferedsdrtristate1__o <= litespisdrphycore_dq_o[1];
    litespisdrphycore_dq_i[1] <= inferedsdrtristate1__i;
    inferedsdrtristate2__o <= litespisdrphycore_dq_o[2];
    litespisdrphycore_dq_i[2] <= inferedsdrtristate2__i;
    inferedsdrtristate3__o <= litespisdrphycore_dq_o[3];
    litespisdrphycore_dq_i[3] <= inferedsdrtristate3__i;
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end else begin
                    if (request[2]) begin
                        grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[2]) begin
                    grant <= 2'd2;
                end else begin
                    if (request[0]) begin
                        grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~request[2])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end else begin
                    if (request[1]) begin
                        grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if (litespisdrphycore_sr_out_load) begin
        litespisdrphycore_sr_out <= (litespisdrphycore_sink_payload_data <<< (6'd32 - litespisdrphycore_sink_payload_len));
    end
    if (litespisdrphycore_sr_out_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore0};
            end
            2'd2: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore1};
            end
            3'd4: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore2};
            end
            4'd8: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore3};
            end
        endcase
    end
    if (litespisdrphycore_sr_in_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1]};
            end
            2'd2: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
            end
            3'd4: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
            4'd8: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
        endcase
    end
    litespisdrphycore_posedge_reg <= litespisdrphycore_posedge;
    litespisdrphycore_posedge_reg2 <= litespisdrphycore_posedge_reg;
    if ((litespisdrphycore_en | litespisdrphycore_en_int)) begin
        if ((litespisdrphycore_cnt < litespisdrphycore_div)) begin
            litespisdrphycore_cnt <= (litespisdrphycore_cnt + 1'd1);
        end else begin
            litespisdrphycore_cnt <= 1'd0;
            litespisdrphycore_clk <= (~litespisdrphycore_clk);
        end
    end else begin
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_cnt <= 1'd0;
    end
    if (litespisdrphycore_wait) begin
        if ((~litespisdrphycore_done)) begin
            litespisdrphycore_count <= (litespisdrphycore_count - 1'd1);
        end
    end else begin
        litespisdrphycore_count <= 4'd11;
    end
    basesoc_litespiphy_state <= basesoc_litespiphy_next_state;
    if (litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
        litespisdrphycore_sr_cnt <= litespisdrphycore_sr_cnt_litespiphy_next_value;
    end
    case (basesoc_litespi_grant)
        1'd0: begin
            if ((~basesoc_litespi_request[0])) begin
                if (basesoc_litespi_request[1]) begin
                    basesoc_litespi_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~basesoc_litespi_request[1])) begin
                if (basesoc_litespi_request[0]) begin
                    basesoc_litespi_grant <= 1'd0;
                end
            end
        end
    endcase
    if (litespimmap_wait) begin
        if ((~litespimmap_done)) begin
            litespimmap_count <= (litespimmap_count - 1'd1);
        end
    end else begin
        litespimmap_count <= 9'd256;
    end
    basesoc_litespi_state <= basesoc_litespi_next_state;
    if (litespimmap_burst_cs_litespi_next_value_ce0) begin
        litespimmap_burst_cs <= litespimmap_burst_cs_litespi_next_value0;
    end
    if (litespimmap_burst_adr_litespi_next_value_ce1) begin
        litespimmap_burst_adr <= litespimmap_burst_adr_litespi_next_value1;
    end
    if (((~master_tx_fifo_pipe_valid_source_valid) | master_tx_fifo_pipe_valid_source_ready)) begin
        master_tx_fifo_pipe_valid_source_valid <= master_tx_fifo_pipe_valid_sink_valid;
        master_tx_fifo_pipe_valid_source_first <= master_tx_fifo_pipe_valid_sink_first;
        master_tx_fifo_pipe_valid_source_last <= master_tx_fifo_pipe_valid_sink_last;
        master_tx_fifo_pipe_valid_source_payload_data <= master_tx_fifo_pipe_valid_sink_payload_data;
        master_tx_fifo_pipe_valid_source_payload_len <= master_tx_fifo_pipe_valid_sink_payload_len;
        master_tx_fifo_pipe_valid_source_payload_width <= master_tx_fifo_pipe_valid_sink_payload_width;
        master_tx_fifo_pipe_valid_source_payload_mask <= master_tx_fifo_pipe_valid_sink_payload_mask;
    end
    if (((~master_rx_fifo_pipe_valid_source_valid) | master_rx_fifo_pipe_valid_source_ready)) begin
        master_rx_fifo_pipe_valid_source_valid <= master_rx_fifo_pipe_valid_sink_valid;
        master_rx_fifo_pipe_valid_source_first <= master_rx_fifo_pipe_valid_sink_first;
        master_rx_fifo_pipe_valid_source_last <= master_rx_fifo_pipe_valid_sink_last;
        master_rx_fifo_pipe_valid_source_payload_data <= master_rx_fifo_pipe_valid_sink_payload_data;
    end
    spi_master_clk_divider1 <= (spi_master_clk_divider1 + 1'd1);
    if (spi_master_clk_rise) begin
        spi_clk <= spi_master_clk_enable;
    end else begin
        if (spi_master_clk_fall) begin
            spi_master_clk_divider1 <= 1'd0;
            spi_clk <= 1'd0;
        end
    end
    spi_cs_n <= (~(spi_master_cs & (spi_master_xfer_enable | (spi_master_cs_mode == 1'd1))));
    if (spi_master_mosi_latch) begin
        spi_master_mosi_data <= spi_master_mosi;
        spi_master_mosi_sel <= 3'd7;
    end else begin
        if (spi_master_clk_fall) begin
            if (spi_master_xfer_enable) begin
                spi_mosi <= sync_array_muxed;
            end
            spi_master_mosi_sel <= (spi_master_mosi_sel - 1'd1);
        end
    end
    if (spi_master_clk_rise) begin
        if (spi_master_loopback) begin
            spi_master_miso_data <= {spi_master_miso_data, spi_mosi};
        end else begin
            spi_master_miso_data <= {spi_master_miso_data, spi_miso};
        end
    end
    if (spi_master_miso_latch) begin
        spi_master_miso <= spi_master_miso_data;
    end
    basesoc_spimaster_state <= basesoc_spimaster_next_state;
    if (spi_master_count_spimaster_next_value_ce) begin
        spi_master_count <= spi_master_count_spimaster_next_value;
    end
    if (timer0_en_storage) begin
        if ((timer0_value == 1'd0)) begin
            timer0_value <= timer0_reload_storage;
        end else begin
            timer0_value <= (timer0_value - 1'd1);
        end
    end else begin
        timer0_value <= timer0_load_storage;
    end
    if (timer0_update_value_re) begin
        timer0_value_status <= timer0_value;
    end
    if (timer0_zero_clear) begin
        timer0_zero_pending <= 1'd0;
    end
    timer0_zero_trigger_d <= timer0_zero_trigger;
    if ((timer0_zero_trigger & (~timer0_zero_trigger_d))) begin
        timer0_zero_pending <= 1'd1;
    end
    if (timer1_en_storage) begin
        if ((timer1_value == 1'd0)) begin
            timer1_value <= timer1_reload_storage;
        end else begin
            timer1_value <= (timer1_value - 1'd1);
        end
    end else begin
        timer1_value <= timer1_load_storage;
    end
    if (timer1_update_value_re) begin
        timer1_value_status <= timer1_value;
    end
    if (timer1_zero_clear) begin
        timer1_zero_pending <= 1'd0;
    end
    timer1_zero_trigger_d <= timer1_zero_trigger;
    if ((timer1_zero_trigger & (~timer1_zero_trigger_d))) begin
        timer1_zero_pending <= 1'd1;
    end
    basesoc_wishbone2csr_state <= basesoc_wishbone2csr_next_state;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_control0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_status_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_mosi0_w;
            end
            2'd3: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_miso_w;
            end
            3'd4: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_cs0_w;
            end
            3'd5: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_loopback0_w;
            end
            3'd6: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_clk_divider0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_control0_re) begin
        spi_master_control_storage[15:0] <= csr_bankarray_csrbank0_control0_r;
    end
    spi_master_control_re <= csr_bankarray_csrbank0_control0_re;
    spi_master_status_re <= csr_bankarray_csrbank0_status_re;
    if (csr_bankarray_csrbank0_mosi0_re) begin
        spi_master_mosi_storage[7:0] <= csr_bankarray_csrbank0_mosi0_r;
    end
    spi_master_mosi_re <= csr_bankarray_csrbank0_mosi0_re;
    spi_master_miso_re <= csr_bankarray_csrbank0_miso_re;
    if (csr_bankarray_csrbank0_cs0_re) begin
        spi_master_cs_storage[16:0] <= csr_bankarray_csrbank0_cs0_r;
    end
    spi_master_cs_re <= csr_bankarray_csrbank0_cs0_re;
    if (csr_bankarray_csrbank0_loopback0_re) begin
        spi_master_loopback_storage <= csr_bankarray_csrbank0_loopback0_r;
    end
    spi_master_loopback_re <= csr_bankarray_csrbank0_loopback0_re;
    if (csr_bankarray_csrbank0_clk_divider0_re) begin
        storage[15:0] <= csr_bankarray_csrbank0_clk_divider0_r;
    end
    re <= csr_bankarray_csrbank0_clk_divider0_re;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_mmap_dummy_bits0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_master_cs0_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_master_phyconfig0_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= master_rxtx_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_master_status_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_mmap_dummy_bits0_re) begin
        litespimmap_storage[7:0] <= csr_bankarray_csrbank1_mmap_dummy_bits0_r;
    end
    litespimmap_re <= csr_bankarray_csrbank1_mmap_dummy_bits0_re;
    if (csr_bankarray_csrbank1_master_cs0_re) begin
        master_cs_storage <= csr_bankarray_csrbank1_master_cs0_r;
    end
    master_cs_re <= csr_bankarray_csrbank1_master_cs0_re;
    if (csr_bankarray_csrbank1_master_phyconfig0_re) begin
        master_phyconfig_storage[23:0] <= csr_bankarray_csrbank1_master_phyconfig0_r;
    end
    master_phyconfig_re <= csr_bankarray_csrbank1_master_phyconfig0_re;
    master_status_re <= csr_bankarray_csrbank1_master_status_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_clk_divisor0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_clk_divisor0_re) begin
        litespisdrphycore_storage[7:0] <= csr_bankarray_csrbank2_clk_divisor0_r;
    end
    litespisdrphycore_re <= csr_bankarray_csrbank2_clk_divisor0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_load0_re) begin
        timer0_load_storage[31:0] <= csr_bankarray_csrbank3_load0_r;
    end
    timer0_load_re <= csr_bankarray_csrbank3_load0_re;
    if (csr_bankarray_csrbank3_reload0_re) begin
        timer0_reload_storage[31:0] <= csr_bankarray_csrbank3_reload0_r;
    end
    timer0_reload_re <= csr_bankarray_csrbank3_reload0_re;
    if (csr_bankarray_csrbank3_en0_re) begin
        timer0_en_storage <= csr_bankarray_csrbank3_en0_r;
    end
    timer0_en_re <= csr_bankarray_csrbank3_en0_re;
    if (csr_bankarray_csrbank3_update_value0_re) begin
        timer0_update_value_storage <= csr_bankarray_csrbank3_update_value0_r;
    end
    timer0_update_value_re <= csr_bankarray_csrbank3_update_value0_re;
    timer0_value_re <= csr_bankarray_csrbank3_value_re;
    timer0_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        timer0_pending_r <= csr_bankarray_csrbank3_ev_pending_r;
    end
    timer0_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        timer0_enable_storage <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    timer0_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_value_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_load0_re) begin
        timer1_load_storage[31:0] <= csr_bankarray_csrbank4_load0_r;
    end
    timer1_load_re <= csr_bankarray_csrbank4_load0_re;
    if (csr_bankarray_csrbank4_reload0_re) begin
        timer1_reload_storage[31:0] <= csr_bankarray_csrbank4_reload0_r;
    end
    timer1_reload_re <= csr_bankarray_csrbank4_reload0_re;
    if (csr_bankarray_csrbank4_en0_re) begin
        timer1_en_storage <= csr_bankarray_csrbank4_en0_r;
    end
    timer1_en_re <= csr_bankarray_csrbank4_en0_re;
    if (csr_bankarray_csrbank4_update_value0_re) begin
        timer1_update_value_storage <= csr_bankarray_csrbank4_update_value0_r;
    end
    timer1_update_value_re <= csr_bankarray_csrbank4_update_value0_re;
    timer1_value_re <= csr_bankarray_csrbank4_value_re;
    timer1_status_re <= csr_bankarray_csrbank4_ev_status_re;
    if (csr_bankarray_csrbank4_ev_pending_re) begin
        timer1_pending_r <= csr_bankarray_csrbank4_ev_pending_r;
    end
    timer1_pending_re <= csr_bankarray_csrbank4_ev_pending_re;
    if (csr_bankarray_csrbank4_ev_enable0_re) begin
        timer1_enable_storage <= csr_bankarray_csrbank4_ev_enable0_r;
    end
    timer1_enable_re <= csr_bankarray_csrbank4_ev_enable0_re;
    if (sys_rst) begin
        litespisdrphycore_storage <= 8'd1;
        litespisdrphycore_re <= 1'd0;
        litespisdrphycore_cnt <= 8'd0;
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_posedge_reg <= 1'd0;
        litespisdrphycore_posedge_reg2 <= 1'd0;
        litespisdrphycore_count <= 4'd11;
        litespimmap_burst_cs <= 1'd0;
        litespimmap_count <= 9'd256;
        litespimmap_storage <= 8'd8;
        litespimmap_re <= 1'd0;
        master_cs_storage <= 1'd0;
        master_cs_re <= 1'd0;
        master_phyconfig_storage <= 24'd0;
        master_phyconfig_re <= 1'd0;
        master_status_re <= 1'd0;
        master_tx_fifo_pipe_valid_source_valid <= 1'd0;
        master_tx_fifo_pipe_valid_source_payload_data <= 32'd0;
        master_tx_fifo_pipe_valid_source_payload_len <= 6'd0;
        master_tx_fifo_pipe_valid_source_payload_width <= 4'd0;
        master_tx_fifo_pipe_valid_source_payload_mask <= 8'd0;
        master_rx_fifo_pipe_valid_source_valid <= 1'd0;
        master_rx_fifo_pipe_valid_source_payload_data <= 32'd0;
        spi_clk <= 1'd0;
        spi_cs_n <= 1'd0;
        spi_mosi <= 1'd0;
        spi_master_miso <= 8'd0;
        spi_master_control_storage <= 16'd0;
        spi_master_control_re <= 1'd0;
        spi_master_status_re <= 1'd0;
        spi_master_mosi_re <= 1'd0;
        spi_master_miso_re <= 1'd0;
        spi_master_cs_storage <= 17'd1;
        spi_master_cs_re <= 1'd0;
        spi_master_loopback_storage <= 1'd0;
        spi_master_loopback_re <= 1'd0;
        spi_master_count <= 3'd0;
        spi_master_clk_divider1 <= 16'd0;
        spi_master_mosi_data <= 8'd0;
        spi_master_mosi_sel <= 3'd0;
        spi_master_miso_data <= 8'd0;
        storage <= 16'd1000;
        re <= 1'd0;
        timer0_load_storage <= 32'd0;
        timer0_load_re <= 1'd0;
        timer0_reload_storage <= 32'd0;
        timer0_reload_re <= 1'd0;
        timer0_en_storage <= 1'd0;
        timer0_en_re <= 1'd0;
        timer0_update_value_storage <= 1'd0;
        timer0_update_value_re <= 1'd0;
        timer0_value_status <= 32'd0;
        timer0_value_re <= 1'd0;
        timer0_zero_pending <= 1'd0;
        timer0_zero_trigger_d <= 1'd0;
        timer0_status_re <= 1'd0;
        timer0_pending_re <= 1'd0;
        timer0_pending_r <= 1'd0;
        timer0_enable_storage <= 1'd0;
        timer0_enable_re <= 1'd0;
        timer0_value <= 32'd0;
        timer1_load_storage <= 32'd0;
        timer1_load_re <= 1'd0;
        timer1_reload_storage <= 32'd0;
        timer1_reload_re <= 1'd0;
        timer1_en_storage <= 1'd0;
        timer1_en_re <= 1'd0;
        timer1_update_value_storage <= 1'd0;
        timer1_update_value_re <= 1'd0;
        timer1_value_status <= 32'd0;
        timer1_value_re <= 1'd0;
        timer1_zero_pending <= 1'd0;
        timer1_zero_trigger_d <= 1'd0;
        timer1_status_re <= 1'd0;
        timer1_pending_re <= 1'd0;
        timer1_pending_r <= 1'd0;
        timer1_enable_storage <= 1'd0;
        timer1_enable_re <= 1'd0;
        timer1_value <= 32'd0;
        grant <= 2'd0;
        slave_sel_r <= 2'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_litespiphy_state <= 2'd0;
        basesoc_litespi_grant <= 1'd0;
        basesoc_litespi_state <= 4'd0;
        basesoc_spimaster_state <= 2'd0;
        basesoc_wishbone2csr_state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 10-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- |
reg [7:0] mem[0:9];
initial begin
	$readmemh("alpha_soc_mem.init", mem);
end
reg [3:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (dbus_ack),
	.dBusWishbone_DAT_MISO  (dbus_dat_r),
	.dBusWishbone_ERR       (dbus_err),
	.externalInterruptArray (interrupt),
	.externalResetVector    (vexriscv),
	.iBusWishbone_ACK       (ibus_ack),
	.iBusWishbone_DAT_MISO  (ibus_dat_r),
	.iBusWishbone_ERR       (ibus_err),
	.reset                  ((sys_rst | reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (dbus_adr),
	.dBusWishbone_BTE       (dbus_bte),
	.dBusWishbone_CTI       (dbus_cti),
	.dBusWishbone_CYC       (dbus_cyc),
	.dBusWishbone_DAT_MOSI  (dbus_dat_w),
	.dBusWishbone_SEL       (dbus_sel),
	.dBusWishbone_STB       (dbus_stb),
	.dBusWishbone_WE        (dbus_we),
	.iBusWishbone_ADR       (ibus_adr),
	.iBusWishbone_BTE       (ibus_bte),
	.iBusWishbone_CTI       (ibus_cti),
	.iBusWishbone_CYC       (ibus_cyc),
	.iBusWishbone_DAT_MOSI  (ibus_dat_w),
	.iBusWishbone_SEL       (ibus_sel),
	.iBusWishbone_STB       (ibus_stb),
	.iBusWishbone_WE        (ibus_we)
);



assign io_out[0] = inferedsdrtristate0__o;
assign io_oeb[0] = ~inferedsdrtristate0_oe;
assign inferedsdrtristate0__i = io_in[0];

assign io_out[1] = inferedsdrtristate1__o;
assign io_oeb[1] = ~inferedsdrtristate1_oe;
assign inferedsdrtristate1__i = io_in[1];

assign io_out[2] = inferedsdrtristate2__o;
assign io_oeb[2] = ~inferedsdrtristate2_oe;
assign inferedsdrtristate2__i = io_in[2];

assign io_out[3] = inferedsdrtristate3__o;
assign io_oeb[3] = ~inferedsdrtristate3_oe;
assign inferedsdrtristate3__i = io_in[3];

assign io_out[4] = spiflash4x_clk;
assign io_oeb[4] = 1'b0;
assign io_out[5] = spiflash4x_cs_n;
assign io_oeb[5] = 1'b0;

assign io_out[6] = spi_clk;
assign io_oeb[6] = 1'b0;
assign io_out[7] = spi_cs_n;
assign io_oeb[7] = 1'b0;
assign io_out[8] = spi_mosi;
assign io_oeb[8] = 1'b0;
assign spi_miso = io_in[9];
assign io_oeb[9] = 1'b1;
assign io_out[9] = 1'b0;



endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-11-25 17:32:04.
//------------------------------------------------------------------------------
